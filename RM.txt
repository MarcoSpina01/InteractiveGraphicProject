Phase 1 – Static Aquarium Environment
Build Tank Geometry

Create a rectangular “box” with inward-facing walls (use BoxGeometry + flip normals).

Add a flat plane for the gravel floor; apply a gravel texture.

Add Décor

Model simple rocks and plants with low-poly meshes or load from .glb/.obj.

Position them to create hiding spots.

Basic Lighting

Add an ambient light + a directional “sun” above the tank.

Tune intensity/colors so things look underwater.

Phase 2 – Water Surface & Caustics
Water Mesh & ShaderMaterial

Create a horizontal plane at the waterline.

Write a custom ShaderMaterial:

Vertex: Gerstner‐wave displacement.

Fragment: Simple blue tint + refraction highlight.

Caustics Projection

Generate or import a caustics texture.

In the shader, animate its UVs based on time to simulate moving light patterns.

Post-Process Light Shafts

Integrate EffectComposer.

Add a depth‐based radial blur pass to simulate god rays through water.

Phase 3 – Manual Fish Animation
Fish Geometry & Rig

For each species, build a mesh (body + tail segments).

Create a bone chain: head → mid → tail.

Skeletal Animation Loop

In your animation loop, for each fish:

js
Copy code
const t = clock.getElapsedTime() * speed + phase;
tailBone.rotation.y = Math.sin(t) * amplitude;
Verify tail swings and that body follows naturally.

Phase 4 – Fish Movement & Behavior
Path Generation

Precompute a set of Catmull–Rom spline curves wrapping through the tank.

Steering Behaviors

Implement “wander”: project a small random acceleration each frame.

Implement “seek”: compute a steering vector toward a target (e.g. pellet).

Implement “avoid”: reflect direction when close to walls or other fish.

State Machine

Idle: wander along spline.

Feeding: override wander → seek nearest pellet.

Switch states on “feed” button click and pellet proximity.

Phase 5 – Particle Systems & Simple Physics
Bubble Emitter

Use Points or small Sprite particles rising from fixed emitters on the tank floor.

Add slight horizontal drift via Perlin noise or random walk.

Pellet System

Spawn small spheres at the feed spout when user clicks “Feed.”

Apply gravity and a rudimentary buoyancy force (e.g. upward force proportional to displacement in water).

(Optional) Hook into Cannon.js for pellet collisions—but keep fish physics manual.

Phase 6 – UI & Interactivity
Control Panel

Integrate dat.GUI or a custom HTML overlay.

Sliders for light intensity, wave amplitude, bubble rate.

Buttons: “Feed,” “Toggle Caustics,” “Toggle God Rays.”

Responsive Camera

Use OrbitControls for mouse/touch interaction.

Limit zoom so camera stays outside tank.

Phase 7 – Polish, Optimization & Testing
Performance Tuning

Merge meshes where possible; use texture atlases.

Lower fish bone count if FPS dips; implement LOD.

Edge-Case Handling

Ensure pellets drain at bottom or are removed after timeout.

Prevent fish from getting “stuck” by resetting path if they pause too long.

Final Touches

Add subtle UI animations (e.g. button hover states).

Write a README documenting controls, build steps, and credits for assets.

Deployment

Build for production (vite build or equivalent).

Host on GitHub Pages, Netlify, or similar.

